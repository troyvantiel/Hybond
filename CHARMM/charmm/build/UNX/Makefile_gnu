# CHARMM 26 makefile for GNU compilers (Linux or elsewhere)
ROOT = rootdir
SRC = $(ROOT)/source
FLX = $(ROOT)/tool/preflx
GMS = $(ROOT)/tool/gmscomp_gnu
CC = gcc -DCHARMM_GNUC -DLINUX64 $(I8DUM2)
GLIB = grflib
CPP = /bin/cat
CUDAC = gcc -x c -DCHARMM_GNUC -DLINUX64 $(I8DUM2) -DNOCUDAC
INCLUDE = -I.
ADDLIB = 
ADDLIB := $(ADDLIB) $(GLIB)
QLIB = -lstdc++
ENDIAN =

GCC_GTEQ_460 := $(shell expr `gcc -dumpversion` \>= 4.6)
ifeq "$(GCC_GTEQ_460)" "1"
  CCPP := g++ -DCHARMM_GNUC -DLINUX64 $(I8DUM2) -fabi-version=0
else 
  FIND_AVX := $(shell fgrep avx /proc/cpuinfo 2>/dev/null | wc -l)
  ifeq "$(FIND_AVX)" "0"
    CCPP := g++ -DCHARMM_GNUC -DLINUX64 $(I8DUM2)
  else
    $(error AVX-compatible CPU requires gcc version >= 4.6.0 for CHARMM compilation)
  endif
endif

# GNU options for MBO(N)D code:
# note that -fno-automatic -finit-local-zero are dangerous
# options because they mask incorrect behaviour. They are
# here only to simulate SGI compiler behaviour to facilitate
# initial porting from SGI (with -static)
# and eventually should be removed and offending code fixed.
# NOTE: BLAS library is needed by MBO(N) code
# BLAS for Linux/PPro from: http://www.cs.utk.edu/~ghenry/distrib
# BLAS dependency has been removed as of c27b2 and c28a2
ifdef MBOND
MBONDFLG = -fno-automatic -finit-local-zero -O -Wall -Wsurprising -W -DCHARMM
INCLUDE = $(INCLUDE) -I../../source/moldyn
endif

# options for compilation with APBS
ifdef APBS
# these must be defined: APBS_LIB, IAPBS_LIB and APBS_BLAS
ADDLIB := $(ADDLIB) -L$(IAPBS_LIB) -liapbs \
        -L$(APBS_LIB) -lapbsmainroutines -lapbs -lmaloc $(APBS_BLAS) -lz

endif

RANLIB = ranlib
.SUFFIXES: .fcm .src .o
VPATH = fcm

#--------------- FCDEFINES is from install.com with the -D entries from pref.dat---------
FFLAGS = $(FCDEFINES)

#---------------------------------------------------------------
# pgi pgf95 7.0
#---------------------------------------------------------------
ifdef PGI_F95
ifdef BIG_ENDIAN
ENDIAN:= -Mbyteswapio
endif
FC = pgf95 -Mbackslash $(ENDIAN) $(FFLAGS)
LD = pgf95 -Munroll -Mnoframe $(ENDIAN)
LDD = pgf95 -v -g $(ENDIAN)
CC = pgcc -DCHARMM_GNUC $(ENDIAN)
CCPP = pgcpp -DCHARMM_GNUC $(ENDIAN)
CUDAC = gcc -x c -DCHARMM_GNUC $(ENDIAN) -DNOCUDAC
endif

#---------------------------------------------------------------
# PathScale compiler 
#---------------------------------------------------------------
ifdef PATHSCALE
ifdef X86_64
FC = pathf95 -m64 $(I8DUM1) $(FFLAGS) -cpp -P # Pathscale cannot handle tokens generated by preprocessor
LD = pathf95 -m64 $(I8DUM1)
LDD = pathf95 -g -m64 $(I8DUM1)
else
FC = pathf95 $(FFLAGS) -cpp -P
LD = pathf95
LDD = pathf95 -g
endif
endif

#---------------------------------------------------------------
# gfortran
#---------------------------------------------------------------
ifdef GFORTRAN
ifdef BIG_ENDIAN
ENDIAN := -fconvert=big-endian
endif
GFORT_GTEQ_460 := $(shell expr `gfortran -dumpversion | sed -e 's/\.\([0-9][0-9]\)/\1/g' -e 's/\.\([0-9]\)/0\1/g' -e 's/^[0-9]\{3,4\}$$/&00/'` \>= 40600)
ifeq "$(GFORT_GTEQ_460)" "1"
	LTO_FLAG := -fno-use-linker-plugin
else
	LTO_FLAG := 
endif
FC = gfortran -DGNU $(FFLAGS) $(LTO_FLAG)
LD = gfortran -DGNU $(LTO_FLAG)
endif

#---------------------------------------------------------------
# *** IFORT *** Intel Fortran Compiler version 8 and above "
#---------------------------------------------------------------
# -tpp7 -axW generates code for Pentium IV processors that will run on 
# other processor types.
ifdef INTEL_IFORT
ifdef BIG_ENDIAN
ENDIAN := -convert big_endian
endif
FC = ifort -132 -align all -no-ipo $(ENDIAN) $(I8DUM1) -heap-arrays 256 $(FFLAGS) -fp-model strict
LD = ifort #-Bstatic
LDD = ifort -g #-Bstatic
CC = icc -O -DCHARMM_GNUC -DLINUX $(I8DUM2)
CUDAC = icc -x c -O -DCHARMM_GNUC -DLINUX $(I8DUM2) -DNOCUDAC
endif
#---------------------------------------------------------------

ifdef OPENMP
ifdef INTEL_IFORT
   FC := $(FC) -openmp
   CC := $(CC) -openmp
   CCPP := $(CCPP) -openmp
   LD := $(LD) -openmp
else
   FC := $(FC) -fopenmp
   CC := $(CC) -fopenmp
   CCPP := $(CCPP) -fopenmp
   LD := $(LD) -fopenmp
endif
endif

ifdef USE_CUDAC
GENCODE_SM30    := -gencode arch=compute_30,code=sm_30
GENCODE_SM35    := -gencode arch=compute_35,code=sm_35
GENCODE_PTXS    := -gencode arch=compute_35,code=compute_35
GENCODE_FLAGS   := $(GENCODE_SM30) $(GENCODE_SM35) $(GENCODE_PTXS)
ifdef DEBUG
CUDAC = nvcc -g $(GENCODE_FLAGS)
else
CUDAC = nvcc -O3 -fmad=true -use_fast_math $(GENCODE_FLAGS)
endif
endif

FC := $(FC) $(INCLUDE)

FC0 = $(FC) -O0 -c
FC1 = $(FC) -O1 -c
FC2 = $(FC) -O2 -c
FC3 = $(FC) -O3 -c
FCR = $(FC) -c -g
FCD = $(FC) -c -g -O0
FCRD = $(FC) -c -g -V -O0

ifdef PGI_F95
  # mkg/rcv 2010
  # -gopt works around a bug in pgf95 < 10.5 which results in many segfaults
  FC0 = $(FC) -c -g -O0 -Mfree
  FC1 = $(FC) -c -gopt -O1 -Mfree
  FC2 = $(FC) -c -gopt -O2 -Munroll -Mnoframe -Mfree
  FC3 = $(FC) -c -gopt -O3 -Munroll -Mnoframe -Mfree
  FCR = $(FC) -c -g -Mfree
  FCD = $(FC) -c -g -Mfree -Mstandard
  FCRD = $(FC) -c -g -V -O0 -Mfree
else
  ifdef GNU_G95
	    FC0 = $(FC) -c -O0 -ffree-form -ffree-line-length-none
	    FC1 = $(FC) -c -O1 -ffree-form -ffree-line-length-none
	    FC2 = $(FC) -c -O2 -ffree-form -ffree-line-length-none
	    FC3 = $(FC) -c -O3 -ffree-form -ffree-line-length-none
	    FCR = $(FC) -c -g -ffree-form -ffree-line-length-none
	    FCD = $(FC) -c -g -O0 -ffree-form -ffree-line-length-none
	    FCRD = $(FC) -c -g -V -O0 -ffree-form -ffree-line-length-none 
  else
    ifdef GFORTRAN
      FC0 = $(FC)  -c -O0 -ffree-form -ffixed-line-length-none -ffree-line-length-none -fmax-identifier-length=63
      FC1 = $(FC)  -c -O1 -ffree-form -ffixed-line-length-none -ffree-line-length-none -fmax-identifier-length=63
      FC2 = $(FC)  -c -O3 -ffree-form -ffixed-line-length-none -ffree-line-length-none -fmax-identifier-length=63
      FC3 = $(FC)  -c -O3 -ffree-form -ffixed-line-length-none -ffree-line-length-none -fmax-identifier-length=63
      FCR = $(FC)  -c -g -ffree-form -ffixed-line-length-none -ffree-line-length-none -fmax-identifier-length=63
      FCD = $(FC)  -c -g -O0 -ffree-form -ffixed-line-length-none -ffree-line-length-none -fmax-identifier-length=63
      FCRD = $(FC) -c -g -V -O0 -ffree-form -ffixed-line-length-none  -ffree-line-length-none -fmax-identifier-length=63
      LDD = $(FC)
      ifneq ($(HOSTTYPE), powerpc64le)
        CC := $(CC) -march=native
        CCPP := $(CCPP) -march=native
      endif
    else
      FC0 = $(FC) -c -finit-local-zero -fno-automatic
      ifdef PATHSCALE
        FC3 += -OPT:Ofast -fno-math-errno -ffast-math
      else
        FC0 = $(FC) -c -finit-local-zero -fno-automatic
      endif
    endif
  endif
endif

# on osx, avx needs to be handled by clang
# and not the gnu assembler
platform = $(shell uname -s)
ifeq ($(platform),Darwin)

  C_FLAGS := $(C_FLAGS) -Wa,-q
  CXX_FLAGS := $(CXX_FLAGS) -Wa,-q

endif

ifdef DEBUG
  FC0 = $(FCD)
  FC1 = $(FCD)
  FC2 = $(FCD)
  FC3 = $(FCD)
  LD  := $(LD) -g
  CC := $(CC) -g $(C_FLAGS)
  CCPP := $(CCPP) -g $(CXX_FLAGS)
else
  CC := $(CC) -O3 $(C_FLAGS)
  CCPP := $(CCPP) -O3 $(CXX_FLAGS)
endif

include objlibs.mk

$(EXEC)/charmm : $(LIBS) $(OBJS)
	$(LD) -o charmm.exe $(LIB)/*.o $(LIBS) $(LIBS) $(LIBS) $(ADDLIB) $(QLIB) $(MSGLIB)
