# CHARMM makefile for OSX compilers (GNU, XLF and IFORT)
ROOT = rootdir
SRC = $(ROOT)/source
FLX = $(ROOT)/tool/preflx
GMS = $(ROOT)/tool/gmscomp_osx
CC = gcc -Dnographics -DCHARMM_GNUC $(I8DUM2)
CCPP = g++ -Dnographics -DCHARMM_GNUC $(I8DUM2)
GLIB = grflib
CPP = /bin/cat
CUDAC = gcc -x c -Dnographics -DCHARMM_GNUC $(I8DUM2) -DNOCUDAC
INCLUDE = -I.
ADDLIB = 
ADDLIB := $(ADDLIB) $(GLIB)
QLIB = -lc++ -lstdc++

# GNU options for MBO(N)D code:
# note that -fno-automatic -finit-local-zero are dangerous
# options because they mask incorrect behaviour. They are
# here only to simulate SGI compiler behaviour to facilitate
# initial porting from SGI (with -static)
# and eventually should be removed and offending code fixed.
# NOTE: BLAS library is needed by MBO(N) code
# BLAS for Linux/PPro from: http://www.cs.utk.edu/~ghenry/distrib
# BLAS dependency has been removed as of c27b2 and c28a2
ifdef MBOND
  MBONDFLG = -fno-automatic -finit-local-zero -Wall -Wsurprising -W -DCHARMM
  INCLUDE = $(INCLUDE) -I../../source/moldyn
endif

RANLIB = ranlib -c
.SUFFIXES: .fcm .src .o
VPATH = fcm

# Supported compilers gfortran (default), g95, ifort (Intel), xlf95 (IBM)
FFLAGS = $(INCLUDE) $(FCDEFINES)
ifdef MPI_OSX
  FCOMPILER = mpif90
  ifdef DEBUG
    CC = mpicc -g -O0
    CCPP = mpicxx -g -O0
  else
    CC = mpicc
    CCPP = mpicxx
  endif
else

  ifdef GNU_GFORTRAN
    FCOMPILER = gfortran
  endif
  
  ifdef GNU_G95
    FCOMPILER = g95 -cpp
  endif
  
  ifdef XLF95_OSX
    FCOMPILER = xlf95
  endif
  
  ifdef INTEL_IFORT
    FCOMPILER = ifort
  endif

  CC = clang
	CCPP = clang++
  
endif # MPI_OSX

LD = $(FCOMPILER)

# *** GFORTRAN *** GFORTRAN f95 compiler
ifdef GNU_GFORTRAN
    ifdef POWERPC
      FFLAGS := $(FFLAGS) -mtune=powerpc
    else
      FFLAGS := $(FFLAGS) -mtune=native -ffree-line-length-none
    endif
    ifdef OPENMP
      FFLAGS := $(FFLAGS) -fopenmp
			LD := $(LD) -fopenmp
    endif
    FC = $(FCOMPILER) -DGNU $(FFLAGS)
else

# *** G95 *** Gnu g95 compiler
  ifdef GNU_G95
#  FFLAGS := $(FFLAGS) -mtune=native
    FFLAGS := $(FFLAGS)
    FC = $(FCOMPILER) -DGNU $(FFLAGS)
  endif

# IBM xlf compiler for Mac OSX
  ifdef XLF95_OSX
# Flag qposition=appendold requried to keep xlf95 from rewinding/overwriting 
# files opened for writing with open append. cb3
    FFLAGS := -qposition=appendold -qfixed -qalign=4k -qarch=auto \
            -qcache=auto -qtune=auto -qmaxmem=-1 $(FFLAGS)
    FC = $(FCOMPILER) $(FFLAGS)
    CC = xlc -Dnographics -Dibmrs -Dosx $(I8DUM2) $(FFLAGS)
    CCPP = xlc++
    CUDAC = xlc++ -+ -Dnographics -Dibmrs -Dosx $(I8DUM2) $(FFLAGS) -DNOCUDAC
  endif

# INTEL ifort compiler for Mac OSX (32 bit)
  ifdef INTEL_IFORT
    ifdef BIG_ENDIAN
      ENDIAN := -convert big_endian
    endif
# removed -axW, not supported under Intel ifort 9.0 on osx
    ifdef X86_64
      FFLAGS := $(FFLAGS) -heap-arrays 256
    endif
    
    ifdef OPENMP
      FFLAGS := $(FFLAGS) -fopenmp
			LD := $(LD) -fopenmp
    endif
# INTEL deprication, replaced -axSTP with -axSSE4.1 -axSSE3 -axSSSE3
#                    replaced -cm with -warn nousage
#                    removed -w95
    FC = $(FCOMPILER) -axSSE4.1 -mp1 -132 \
       -warn nousage -align all \
       $(ENDIAN) $(FFLAGS)
    CC = icc -Dnographics -DCHARMM_GNUC $(I8DUM2) $(FFLAGS)
    CCPP = icc -Dnographics -DCHARMM_GNUC $(I8DUM2) $(FFLAGS)
    CUDAC = icc -x c -Dnographics -DCHARMM_GNUC $(I8DUM2) $(FFLAGS) -DNOCUDAC
  endif # INTEL_IFORT
endif

ifdef USE_CUDAC
  GENCODE_SM30    := -gencode arch=compute_30,code=sm_30
  GENCODE_SM35    := -gencode arch=compute_35,code=sm_35
  GENCODE_PTXS    := -gencode arch=compute_35,code=compute_35
  GENCODE_FLAGS   := $(GENCODE_SM30) $(GENCODE_SM35) $(GENCODE_PTXS)
  ifdef DEBUG
    CUDAC = nvcc -g -O0 $(GENCODE_FLAGS) --machine 64
  else
    CUDAC = nvcc -O2 $(GENCODE_FLAGS) -fmad=true -use_fast_math --machine 64
  endif
endif # USE_CUDAC

ifdef GNU_GFORTRAN
    FC0 = $(FC) -c -O0 -ffree-form -ffree-line-length-none -fmax-identifier-length=63
    FC1 = $(FC) -c -O1 -ffree-form -ffree-line-length-none -fmax-identifier-length=63
    FC2 = $(FC) -c -O2 -ffree-form -ffree-line-length-none -fmax-identifier-length=63
    FC3 = $(FC) -c -O3 -ffree-form -ffree-line-length-none -fmax-identifier-length=63
    FCR = $(FC) -c -g -ffree-form -ffree-line-length-none -fmax-identifier-length=63
    FCD = $(FC) -c -g -O0 -ffree-form -ffree-line-length-none -fmax-identifier-length=63
    FCRD = $(FC) -c -g -V -O0 -ffree-form -ffree-line-length-none-fmax-identifier-length=63
    GCC_GTEQ_470 := $(shell expr `gcc -dumpversion | sed -e 's/\.\([0-9][0-9]\)/\1/g' -e 's/\.\([0-9]\)/0\1/g' -e 's/^[0-9]\{3,4\}$$/&00/'` \>= 40700)
    ifeq "$(GCC_GTEQ_470)" "1"
       CC := $(CC) -march=native -Wa,-q -fabi-version=0 $(FFLAGS)
       CCPP := $(CCPP) -march=native -Wa,-q -fabi-version=0 $(FFLAGS)
    else
       CC := $(CC) $(FFLAGS)
       CCPP := $(CCPP) $(FFLAGS)
    endif
else

  # IBM xlf beta compiler for Mac OSX
  ifdef XLF95_OSX
    FC0 = $(FC) -c -g -O0
    FC1 = $(FC) -c -O1 -g
    FC2 = $(FC) -c -O2 -qarch=auto -qtune=auto -qunroll=yes
    FC3 = $(FC) -c -O4 -qarch=auto -qtune=auto -qunroll=yes
    FCR = $(FC) -c -O3 -qstrict -g
    FCD = $(FC) -c -no -g -O0
    FCRD = $(FC) -c -no -g -O0
  endif
  
  ifdef GNU_G95
    FC0 = $(FC) -c -O0 -ffree-form -ffree-line-length-none
    FC1 = $(FC) -c -O1 -ffree-form -ffree-line-length-none
    FC2 = $(FC) -c -O2 -ffree-form -ffree-line-length-none
    FC3 = $(FC) -c -O3 -ffree-form -ffree-line-length-none
    FCR = $(FC) -c -g  -ffree-form -ffree-line-length-none
    FCD = $(FC) -c -g -O0  -ffree-form -ffree-line-length-none
    FCRD = $(FC) -c -g -V -O0  -ffree-form -ffree-line-length-none
  endif

  ifdef  INTEL_IFORT
    FC0 = $(FC) -c -O0 -free
    FC1 = $(FC) -c -O1 -free
    FC2 = $(FC) -c -O2 -free
    FC3 = $(FC) -c -O3 -free
    FCR = $(FC) -c -g  -free
    FCD = $(FC) -c -g -O0  -free -traceback
    FCRD = $(FC) -c -g -V -O0  -free
    CC := $(CC) -xHost
    CCPP := $(CCPP) -xHost
  endif

endif # GNU_FORTRAN

ifdef DEBUG
    FC0 = $(FCD)
    FC1 = $(FCD)
    FC2 = $(FCD)
    FC3 = $(FCD)
    CC := $(CC) -g -O0
    CCPP := $(CCPP) -g -O0
else
    CC := $(CC) -O2
    CCPP := $(CCPP) -O2
endif

include objlibs.mk

$(EXEC)/charmm : $(LIBS) $(OBJS)
	$(LD) -o charmm.exe $(LIB)/*.o $(LIBS) $(ADDLIB) $(QLIB) $(MSGLIB)
