#include "CudaCharmmKernelSources.h"

using namespace std;
using namespace OpenMM;
const string CudaCharmmKernelSources::monteCarloBarostat2 = "/**\n"
" * Scale the particle positions.\n"
" */\n"
"extern \"C\" __global__ void scalePositions2(double4 scale, int numMolecules, real4 periodicBoxSize, real4 invPeriodicBoxSize, real4* __restrict__ posq,\n"
"        const int* __restrict__ moleculeAtoms, const int* __restrict__ moleculeStartIndex) {\n"
"    for (int index = blockIdx.x*blockDim.x+threadIdx.x; index < numMolecules; index += blockDim.x*gridDim.x) {\n"
"        int first = moleculeStartIndex[index];\n"
"        int last = moleculeStartIndex[index+1];\n"
"        int numAtoms = last-first;\n"
"\n"
"        // Find the center of each molecule.\n"
"\n"
"        real3 center = make_real3(0, 0, 0);\n"
"        for (int atom = first; atom < last; atom++) {\n"
"            real4 pos = posq[moleculeAtoms[atom]];\n"
"            center.x += pos.x;\n"
"            center.y += pos.y;\n"
"            center.z += pos.z;\n"
"        }\n"
"        real invNumAtoms = RECIP(numAtoms);\n"
"        center.x *= invNumAtoms;\n"
"        center.y *= invNumAtoms;\n"
"        center.z *= invNumAtoms;\n"
"\n"
"        // Move it into the first periodic box.\n"
"        int xcell;\n"
"        int ycell;\n"
"        int zcell;\n"
"        xcell = (int) floor(center.x*invPeriodicBoxSize.x);\n"
"        ycell = (int) floor(center.y*invPeriodicBoxSize.y);\n"
"        zcell = (int) floor(center.z*invPeriodicBoxSize.z);\n"
"\n"
"        real3 delta = make_real3(xcell*periodicBoxSize.x, ycell*periodicBoxSize.y, zcell*periodicBoxSize.z);\n"
"\n"
"        center.x -= delta.x;\n"
"        center.y -= delta.y;\n"
"        center.z -= delta.z;\n"
"\n"
"        // Now scale the position of the molecule center.\n"
"        \n"
"        delta.x = center.x*(scale.x-1)-delta.x;\n"
"        delta.y = center.y*(scale.y-1)-delta.y;\n"
"        delta.z = center.z*(scale.z-1)-delta.z;\n"
"        for (int atom = first; atom < last; atom++) {\n"
"            real4 pos = posq[moleculeAtoms[atom]];\n"
"            pos.x += delta.x;\n"
"            pos.y += delta.y;\n"
"            pos.z += delta.z;\n"
"            posq[moleculeAtoms[atom]] = pos;\n"
"        }\n"
"    }\n"
"}\n"
"";

