#---------------------------------------------------
# OpenMM OpenCL GB
#
# Unix:
#   libOpenMMGBOpenCL.so
#----------------------------------------------------

# Collect up information about the version of the OpenMM library we're building
# and make it available to the code so it can be built into the binaries.
SET(OPENMMGBOPENCL_LIBRARY_NAME OpenMMGBSWOpenCL)
SET(SHARED_TARGET ${OPENMMGBOPENCL_LIBRARY_NAME})

# collect up source files
file(GLOB SOURCE_INCLUDE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.h)
file(GLOB SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)

# Set variables needed for encoding kernel sources into a C++ class

SET(CL_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
SET(CL_SOURCE_CLASS OpenCLGBSWKernelSources)
SET(CL_KERNELS_CPP ${CMAKE_CURRENT_BINARY_DIR}/${CL_SOURCE_CLASS}.cpp)
SET(CL_KERNELS_H ${CMAKE_CURRENT_BINARY_DIR}/${CL_SOURCE_CLASS}.h)
list(APPEND SOURCE_FILES ${CL_KERNELS_CPP} ${CL_KERNELS_H})

# must do vvv for #include<cl.hpp> in openmm/opencl/OpenCLContext.h
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
INCLUDE_DIRECTORIES(${OpenCL_INCLUDE_DIR})

FILE(GLOB OPENCL_KERNELS ${CL_SOURCE_DIR}/kernels/*.cl)
ADD_CUSTOM_COMMAND(OUTPUT ${CL_KERNELS_CPP} ${CL_KERNELS_H}
    COMMAND ${CMAKE_COMMAND}
    ARGS -DCL_SOURCE_DIR=${CL_SOURCE_DIR}
         -DCL_KERNELS_CPP=${CL_KERNELS_CPP}
         -DCL_KERNELS_H=${CL_KERNELS_H}
         -DCL_SOURCE_CLASS=${CL_SOURCE_CLASS}
         -P ${CMAKE_CURRENT_SOURCE_DIR}/EncodeCLFiles.cmake
    DEPENDS ${OPENCL_KERNELS})
SET_SOURCE_FILES_PROPERTIES(${CL_KERNELS_CPP} ${CL_KERNELS_H} PROPERTIES
  GENERATED TRUE)
ADD_LIBRARY(${SHARED_TARGET} SHARED
  ${SOURCE_FILES} ${SOURCE_INCLUDE_FILES})

TARGET_LINK_LIBRARIES(${SHARED_TARGET}
  ${SHARED_GB_TARGET}
  ${OPENMM_OPENCL_PLUGIN} ${OPENMM_LIBRARIES}
  ${OpenCL_LIBRARY}
  ${PTHREADS_LIB})

SET_TARGET_PROPERTIES(${SHARED_TARGET} PROPERTIES
  COMPILE_FLAGS "${EXTRA_COMPILE_FLAGS}") 

IF(APPLE)
  SET_TARGET_PROPERTIES(${SHARED_TARGET} PROPERTIES
    LINK_FLAGS "${EXTRA_LINK_FLAGS} -framework OpenCL")
  set_property(TARGET ${SHARED_TARGET} PROPERTY MACOSX_RPATH ON)
ELSE(APPLE)
  SET_TARGET_PROPERTIES(${SHARED_TARGET} PROPERTIES
    LINK_FLAGS "${EXTRA_LINK_FLAGS}")
ENDIF(APPLE)

# INSTALL(TARGETS ${SHARED_TARGET} DESTINATION lib)
INSTALL(TARGETS ${SHARED_TARGET} DESTINATION "${CMAKE_INSTALL_PREFIX}/lib")
# Ensure that links to the main OpenCL library will be resolved.
IF (APPLE)
  SET(APPLE_OPENCL_LIBRARY lib${SHARED_TARGET}.dylib)
  # INSTALL(CODE "EXECUTE_PROCESS(COMMAND install_name_tool -change ${OPENCL_LIBRARY} @loader_path/${OPENCL_LIBRARY} ${CMAKE_INSTALL_PREFIX}/lib/lib${SHARED_TARGET}.dylib)")
  INSTALL(CODE "EXECUTE_PROCESS(COMMAND install_name_tool -change ${APPLE_OPENCL_LIBRARY} @loader_path/${APPLE_OPENCL_LIBRARY} ${CMAKE_INSTALL_PREFIX}/lib/lib${SHARED_TARGET}.dylib)")
ENDIF (APPLE)
